// Mocks generated by Mockito 5.0.2 from annotations
// in testproject/test/dog_view_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:testproject/dog_model.dart' as _i2;
import 'package:testproject/dog_view_model.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [Dog].
///
/// See the documentation for Mockito's code generation for more information.
class MockDog extends _i1.Mock implements _i2.Dog {
  MockDog() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  int get affectionLevel =>
      (super.noSuchMethod(Invocation.getter(#affectionLevel), returnValue: 0)
          as int);
  @override
  set affectionLevel(int? _affectionLevel) =>
      super.noSuchMethod(Invocation.setter(#affectionLevel, _affectionLevel),
          returnValueForMissingStub: null);
  @override
  int get hungyLevel =>
      (super.noSuchMethod(Invocation.getter(#hungyLevel), returnValue: 0)
          as int);
  @override
  set hungyLevel(int? _hungyLevel) =>
      super.noSuchMethod(Invocation.setter(#hungyLevel, _hungyLevel),
          returnValueForMissingStub: null);
}

/// A class which mocks [DogViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDogViewModel extends _i1.Mock implements _i3.DogViewModel {
  MockDogViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get hungryPoint =>
      (super.noSuchMethod(Invocation.getter(#hungryPoint), returnValue: 0)
          as int);
  @override
  set hungryPoint(int? _hungryPoint) =>
      super.noSuchMethod(Invocation.setter(#hungryPoint, _hungryPoint),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> eat(_i2.Dog? dog, String? food) =>
      (super.noSuchMethod(Invocation.method(#eat, [dog, food]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> play(_i2.Dog? dog) =>
      (super.noSuchMethod(Invocation.method(#play, [dog]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  bool isHungry(int? hungryLevel) =>
      (super.noSuchMethod(Invocation.method(#isHungry, [hungryLevel]),
          returnValue: false) as bool);
  @override
  dynamic reset(_i2.Dog? dog) =>
      super.noSuchMethod(Invocation.method(#reset, [dog]));
}
